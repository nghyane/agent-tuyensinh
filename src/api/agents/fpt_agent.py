"""
FPT University Agent configuration
"""

import os
from textwrap import dedent
from typing import Any, List, Optional

from agno.agent import Agent
from agno.memory.v2.db.postgres import PostgresMemoryDb
from agno.memory.v2.memory import Memory
from agno.models.openai import OpenAILike
from agno.storage.postgres import PostgresStorage
from agno.tools.knowledge import KnowledgeTools

from agno_integration.intent_tool import create_intent_detection_tool
from agno_integration.university_api_tool import (
    UniversityApiTool,
    create_university_api_tool,
)
from core.application.services.hybrid_intent_service import HybridIntentDetectionService
from infrastructure.knowledge.fpt_knowledge_base import create_fpt_knowledge_base


def get_fpt_agent(
    model_id: str = "gpt-4o",
    user_id: Optional[str] = None,
    session_id: Optional[str] = None,
    intent_service: Optional[HybridIntentDetectionService] = None,
    debug_mode: bool = False,
    enable_rag: bool = True,
) -> Agent:
    """
    Create and configure FPT University Agent with Agno features

    Args:
        model_id: OpenAI model ID to use
        user_id: User ID for context
        session_id: Session ID for context
        intent_service: Intent detection service
        debug_mode: Enable debug mode
        enable_rag: Enable RAG knowledge base

    Returns:
        Configured FPT University Agent
    """

    # Create tools for the agent
    tools: List[Any] = []
    # tools.append(ReasoningTools(add_instructions=True))

    # Add intent detection tool if service is provided
    if intent_service:
        tools.append(create_intent_detection_tool(intent_service))

    # Add University API tool for accessing public university data
    tools.append(create_university_api_tool())

    # Add knowledge base tools if RAG is enabled
    if enable_rag:
        try:
            knowledge_base = create_fpt_knowledge_base()

            # Ki·ªÉm tra xem knowledge base c√≥ t·ªìn t·∫°i kh√¥ng
            if not knowledge_base.exists():
                print("üìö Knowledge base not found, creating new one...")
                knowledge_base.load(recreate=True)

            # T·∫°o KnowledgeTools v·ªõi Qdrant
            knowledge_tools = KnowledgeTools(
                knowledge=knowledge_base,
                think=False,
                search=True,
                analyze=True,
                add_instructions=True,
                add_few_shot=False,
            )
            tools.append(knowledge_tools)
            print("‚úÖ Knowledge tools added successfully with Qdrant")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not initialize knowledge base: {e}")
            print("Agent will run without RAG capabilities")

    # Get database URL from environment variable
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise ValueError(
            "DATABASE_URL environment variable is required for PostgreSQL storage"
        )

    # Storage for agent sessions
    storage = PostgresStorage(table_name="fpt_agent_sessions", db_url=db_url)

    # Memory for long-term user memory
    memory = Memory(
        db=PostgresMemoryDb(table_name="fpt_user_memories", db_url=db_url),
        delete_memories=True,
        clear_memories=True,
    )

    # Agent instructions with RAG capabilities
    instructions = dedent(
        """
        As FPT University Agent, your goal is to provide helpful, accurate, and professional assistance
        to students, staff, and visitors of FPT University.

        Your capabilities include:
        - Intent detection to understand user queries and their purpose
        - Reasoning to provide thoughtful, well-structured responses
        - Access to FPT University official API for real-time data
        - Information about departments, programs, campuses, and fees
        - Long-term memory to remember user preferences and past interactions
        - Knowledge base search for detailed reference information

        Guidelines for your responses:
        1. **Understand the Query**: Use intent detection when you need to understand the user's intent clearly
        2. **Use Official Data**: Always use the FPT API tools to get real-time, accurate information
        3. **Search Knowledge Base**: Use knowledge base search for detailed reference information about policies, procedures, and historical data
        4. **Be Professional**: Maintain a helpful and professional tone
        5. **Use Reasoning**: For complex questions, break down your thinking process
        6. **Be Comprehensive**: Provide detailed information when available from the API and knowledge base
        7. **Handle Errors Gracefully**: If API is unavailable, inform users and suggest alternatives
        8. **Remember Users**: Use your memory to personalize responses based on past interactions

        **AVAILABLE TOOLS:**

        **Intent Detection Tool:**
        - detect_intent(query, user_id, language): Ph√°t hi·ªán √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng
        - S·ª≠ d·ª•ng khi c·∫ßn hi·ªÉu r√µ intent c·ªßa user query
        - Tr·∫£ v·ªÅ intent ID, confidence, v√† suggestions

        **University API Tools:**
        - get_departments(limit, offset): L·∫•y danh s√°ch khoa/ph√≤ng ban
        - get_programs(department_code, limit, offset): L·∫•y danh s√°ch ch∆∞∆°ng tr√¨nh h·ªçc
        - get_program_details(program_id): L·∫•y chi ti·∫øt ch∆∞∆°ng tr√¨nh h·ªçc c·ª• th·ªÉ
        - get_campuses(year, limit, offset): L·∫•y danh s√°ch campus
        - get_campus_details(campus_id, year): L·∫•y chi ti·∫øt campus c·ª• th·ªÉ

        **Knowledge Base Tool:**
        - search_fpt_knowledge(query): T√¨m ki·∫øm th√¥ng tin t·ª´ knowledge base
        - S·ª≠ d·ª•ng cho th√¥ng tin chi ti·∫øt v·ªÅ h·ªçc ph√≠, ch√≠nh s√°ch, quy ƒë·ªãnh
        - T√¨m ki·∫øm th√¥ng tin l·ªãch s·ª≠, t√†i li·ªáu tham kh·∫£o
        - H·ªó tr·ª£ t√¨m ki·∫øm b·∫±ng ti·∫øng Vi·ªát

        **FLEXIBLE WORKFLOW APPROACH:**
        - Kh√¥ng c·∫ßn tu√¢n theo workflow c·ª©ng nh·∫Øc
        - Ch·ªçn tool ph√π h·ª£p d·ª±a tr√™n context c·ªßa c√¢u h·ªèi
        - C√≥ th·ªÉ g·ªçi tr·ª±c ti·∫øp tool c·∫ßn thi·∫øt m√† kh√¥ng c·∫ßn qua intent detection
        - S·ª≠ d·ª•ng reasoning ƒë·ªÉ quy·∫øt ƒë·ªãnh tool n√†o c·∫ßn d√πng

        **OPTIMIZED WORKFLOW FOR SPECIFIC PROGRAMS:**
        - Khi user h·ªèi v·ªÅ ng√†nh c·ª• th·ªÉ (CNTT, Marketing, Business, etc.):
          1. get_departments() ‚Üí t√¨m department ph√π h·ª£p
          2. get_programs(department_code) ‚Üí l·ªçc programs theo department
          3. get_program_details(program_id) ‚Üí l·∫•y chi ti·∫øt n·∫øu c·∫ßn
        - L·ª£i √≠ch: K·∫øt qu·∫£ ch√≠nh x√°c h∆°n, nhanh h∆°n, tr√°nh confusion

        **COMMON USE CASES:**

        **H·ªçc ph√≠ v√† ch∆∞∆°ng tr√¨nh h·ªçc:**
        - Khi h·ªèi v·ªÅ h·ªçc ph√≠ ng√†nh c·ª• th·ªÉ (nh∆∞ "CNTT"):
          1. D√πng get_departments() ƒë·ªÉ t√¨m department li√™n quan
          2. D√πng get_programs(department_code) ƒë·ªÉ l·ªçc theo department
          3. D√πng get_program_details(program_id) ƒë·ªÉ l·∫•y chi ti·∫øt h·ªçc ph√≠
        - Khi h·ªèi v·ªÅ t·∫•t c·∫£ ng√†nh: d√πng get_programs() kh√¥ng c√≥ filter
        - Khi c·∫ßn chi ti·∫øt: d√πng get_program_details() v·ªõi program_id

        **Th√¥ng tin campus:**
        - Khi h·ªèi v·ªÅ campus: d√πng get_campuses() ƒë·ªÉ xem danh s√°ch
        - Khi h·ªèi chi ti·∫øt campus: d√πng get_campus_details() v·ªõi campus_id

        **Th√¥ng tin khoa:**
        - Khi h·ªèi v·ªÅ khoa: d√πng get_departments() ƒë·ªÉ xem danh s√°ch

        **Knowledge Base Search:**
        - Khi h·ªèi v·ªÅ ch√≠nh s√°ch h·ªçc b·ªïng: search_fpt_knowledge("h·ªçc b·ªïng")
        - Khi h·ªèi v·ªÅ quy ƒë·ªãnh tuy·ªÉn sinh: search_fpt_knowledge("tuy·ªÉn sinh")
        - Khi h·ªèi v·ªÅ th√¥ng tin chi ti·∫øt campus: search_fpt_knowledge("campus")
        - Khi h·ªèi v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o: search_fpt_knowledge("ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o")

        **IMPORTANT NOTES:**
        - C√°c tools ƒë√£ ƒë∆∞·ª£c format s·∫µn, tr·∫£ v·ªÅ text ƒë·∫πp v√† d·ªÖ ƒë·ªçc
        - Kh√¥ng c·∫ßn format l·∫°i k·∫øt qu·∫£ t·ª´ tools
        - Khi user h·ªèi v·ªÅ "CNTT", hi·ªÉu l√† Computer Science/Information Technology
        - Lu√¥n cung c·∫•p th√¥ng tin b·∫±ng c·∫£ ti·∫øng Vi·ªát v√† ti·∫øng Anh khi c√≥ s·∫µn
        - Bao g·ªìm m√£ ch∆∞∆°ng tr√¨nh v√† th√¥ng tin khoa ƒë·ªÉ r√µ r√†ng
        - **QUAN TR·ªåNG**: M·ªói item trong danh s√°ch ƒë·ªÅu c√≥ ID ƒë·ªÉ l·∫•y chi ti·∫øt (KH√îNG hi·ªÉn th·ªã ID cho user)
        - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch ƒë·ªÉ g·ªçi get_program_details() ho·∫∑c get_campus_details() (ch·ªâ d√πng n·ªôi b·ªô)
        - **T·ªêI ∆ØU H√ìA**: Khi h·ªèi v·ªÅ ng√†nh c·ª• th·ªÉ, lu√¥n t√¨m department tr∆∞·ªõc ƒë·ªÉ l·ªçc ch√≠nh x√°c
        - **KNOWLEDGE BASE**: S·ª≠ d·ª•ng search_fpt_knowledge() cho th√¥ng tin chi ti·∫øt v√† ch√≠nh s√°ch
        - **KH√îNG HI·ªÇN TH·ªä ID**: Kh√¥ng bao gi·ªù hi·ªÉn th·ªã ID, program_id, campus_id, department_code trong responses cho user

        **EXAMPLES:**
        - User: "H·ªçc ph√≠ ng√†nh CNTT bao nhi√™u?" ‚Üí get_departments() ‚Üí get_programs(department_code) ‚Üí get_program_details(program_id)
        - User: "C√≥ nh·ªØng campus n√†o?" ‚Üí get_campuses()
        - User: "Chi ti·∫øt campus H√† N·ªôi" ‚Üí get_campus_details(campus_id)
        - User: "C√°c khoa c·ªßa tr∆∞·ªùng" ‚Üí get_departments()
        - User: "Chi ti·∫øt ch∆∞∆°ng tr√¨nh ABC" ‚Üí get_program_details(program_id)
        - User: "Ng√†nh CNTT c√≥ nh·ªØng ch∆∞∆°ng tr√¨nh g√¨?" ‚Üí get_departments() ‚Üí get_programs(department_code)
        - User: "Ch√≠nh s√°ch h·ªçc b·ªïng 2025" ‚Üí search_fpt_knowledge("h·ªçc b·ªïng 2025")
        - User: "Quy ƒë·ªãnh tuy·ªÉn sinh" ‚Üí search_fpt_knowledge("tuy·ªÉn sinh quy ƒë·ªãnh")

        **RESPONSE FORMAT GUIDELINES:**
        - Ch·ªâ hi·ªÉn th·ªã th√¥ng tin h·ªØu √≠ch cho user: t√™n, m√¥ t·∫£, h·ªçc ph√≠, th·ªùi gian h·ªçc, v.v.
        - KH√îNG hi·ªÉn th·ªã: ID, program_id, campus_id, department_code, session_id, user_id
        - T·∫≠p trung v√†o th√¥ng tin th·ª±c t·∫ø m√† user c·∫ßn bi·∫øt
        - S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, th√¢n thi·ªán

        Always be truthful about what you know and don't know. If you're unsure about specific details,
        suggest contacting the relevant department or checking the official FPT University website.
        """
    )

    return Agent(
        name="FPT University Agent",
        user_id=user_id,
        session_id=session_id,
        model=OpenAILike(
            id=model_id,
            api_key=os.getenv("OPENAI_API_KEY"),
            base_url=os.getenv("OPENAI_BASE_URL"),
        ),
        # Tools available to the agent
        tools=tools,
        # Storage for agent sessions
        storage=storage,
        # Memory for user memories
        memory=memory,
        enable_agentic_memory=True,
        # Description of the agent
        description=dedent(
            """
        You are FPT University Agent, an AI assistant designed to help students, staff, and visitors
        with information about FPT University. You have access to intent detection capabilities,
        reasoning tools, real-time university data, and a comprehensive knowledge base to provide
        thoughtful, accurate responses. You can flexibly choose the most appropriate tools based on user queries.
        """
        ),
        # Instructions for the agent
        instructions=instructions,
        # Add state in messages for dynamic content
        add_state_in_messages=True,
        # Add history to messages
        add_history_to_messages=True,
        # Number of history responses
        num_history_responses=5,
        # Format responses using markdown
        markdown=True,
        # Add the current date and time to the instructions
        add_datetime_to_instructions=True,
        # Show tool calls in responses
        show_tool_calls=True,
        # Show debug logs
        debug_mode=debug_mode,
    )


class FPTAgentManager:
    """
    Context manager for FPT Agent with proper cleanup of resources
    """

    def __init__(
        self,
        model_id: str = "gpt-4o",
        user_id: Optional[str] = None,
        session_id: Optional[str] = None,
        intent_service: Optional[HybridIntentDetectionService] = None,
        debug_mode: bool = False,
        enable_rag: bool = True,
    ):
        self.model_id = model_id
        self.user_id = user_id
        self.session_id = session_id
        self.intent_service = intent_service
        self.debug_mode = debug_mode
        self.enable_rag = enable_rag
        self.agent: Optional[Agent] = None
        self.university_api_tool: Optional[UniversityApiTool] = None

    async def __aenter__(self) -> Agent:
        """Initialize agent with proper resource management"""
        self.agent = get_fpt_agent(
            model_id=self.model_id,
            user_id=self.user_id,
            session_id=self.session_id,
            intent_service=self.intent_service,
            debug_mode=self.debug_mode,
            enable_rag=self.enable_rag,
        )

        # Find University API tool for cleanup later
        for tool in self.agent.tools or []:
            if isinstance(tool, UniversityApiTool):
                self.university_api_tool = tool
                break

        return self.agent

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Cleanup agent resources"""
        if self.university_api_tool:
            await self.university_api_tool.close()

        # Close agent storage if available
        if self.agent and hasattr(self.agent, "storage") and self.agent.storage:
            # SqliteStorage doesn't have close method, skip cleanup
            pass


def create_fpt_agent_manager(
    model_id: str = "gpt-4o",
    user_id: Optional[str] = None,
    session_id: Optional[str] = None,
    intent_service: Optional[HybridIntentDetectionService] = None,
    debug_mode: bool = False,
    enable_rag: bool = True,
) -> FPTAgentManager:
    """
    Create FPT Agent Manager with auto-cleanup

    Usage:
        async with create_fpt_agent_manager() as agent:
            response = await agent.run("H·ªçc ph√≠ ng√†nh CNTT bao nhi√™u?")

    Args:
        model_id: OpenAI model ID to use
        user_id: User ID for context
        session_id: Session ID for context
        intent_service: Intent detection service
        debug_mode: Enable debug mode
        enable_rag: Enable RAG knowledge base

    Returns:
        FPTAgentManager instance
    """
    return FPTAgentManager(
        model_id=model_id,
        user_id=user_id,
        session_id=session_id,
        intent_service=intent_service,
        debug_mode=debug_mode,
        enable_rag=enable_rag,
    )
