"""
FPT University Agent configuration
"""

import os
from textwrap import dedent
from typing import Any, List, Optional

from agno.agent import Agent
from agno.memory.v2.db.postgres import PostgresMemoryDb
from agno.memory.v2.memory import Memory
from agno.models.openai import OpenAILike
from agno.storage.postgres import PostgresStorage
from agno.tools.knowledge import KnowledgeTools

from agno_integration.intent_tool import create_intent_detection_tool
from agno_integration.university_api_tool import (
    UniversityApiTool,
    create_university_api_tool,
)
from core.application.services.hybrid_intent_service import HybridIntentDetectionService
from infrastructure.knowledge.fpt_knowledge_base import create_fpt_knowledge_base


def get_fpt_agent(
    model_id: str = "gpt-4o",
    user_id: Optional[str] = None,
    session_id: Optional[str] = None,
    intent_service: Optional[HybridIntentDetectionService] = None,
    storage: Optional[PostgresStorage] = None,
    memory: Optional[Memory] = None,
    debug_mode: bool = False,
    enable_rag: bool = True,
) -> Agent:
    """
    Create and configure FPT University Agent with Agno features

    Args:
        model_id: OpenAI model ID to use
        user_id: User ID for context
        session_id: Session ID for context
        intent_service: Intent detection service
        storage: Pre-initialized storage service
        memory: Pre-initialized memory service
        debug_mode: Enable debug mode
        enable_rag: Enable RAG knowledge base

    Returns:
        Configured FPT University Agent
    """

    # Create tools for the agent
    tools: List[Any] = []
    # tools.append(ReasoningTools(add_instructions=True))

    # Add intent detection tool if service is provided
    if intent_service:
        tools.append(create_intent_detection_tool(intent_service))

    # Add University API tool for accessing public university data
    tools.append(create_university_api_tool())

    # Add knowledge base tools if RAG is enabled
    if enable_rag:
        try:
            knowledge_base = create_fpt_knowledge_base()

            # Ki·ªÉm tra xem knowledge base c√≥ t·ªìn t·∫°i kh√¥ng
            if not knowledge_base.exists():
                print("üìö Knowledge base not found, creating new one...")
                knowledge_base.load(recreate=True)

            # T·∫°o KnowledgeTools v·ªõi Qdrant
            knowledge_tools = KnowledgeTools(
                knowledge=knowledge_base,
                think=False,
                search=True,
                analyze=True,
                add_instructions=True,
                add_few_shot=False,
            )
            tools.append(knowledge_tools)
            print("‚úÖ Knowledge tools added successfully with Qdrant")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not initialize knowledge base: {e}")
            print("Agent will run without RAG capabilities")

    # Get database URL from environment variable
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        raise ValueError(
            "DATABASE_URL environment variable is required for PostgreSQL storage"
        )

    # Use pre-initialized storage and memory if provided, otherwise create new ones
    storage = storage or PostgresStorage(
        table_name="fpt_agent_sessions", db_url=db_url
    )
    memory = memory or Memory(
        db=PostgresMemoryDb(table_name="fpt_user_memories", db_url=db_url),
        delete_memories=True,
        clear_memories=True,
    )

    # Agent instructions with RAG capabilities
    instructions = dedent(
        """
        B·∫°n l√† Tr·ª£ l√Ω AI c·ªßa ƒê·∫°i h·ªçc FPT, v·ªõi nhi·ªám v·ª• c·ªët l√µi l√† cung c·∫•p th√¥ng tin ch√≠nh x√°c, chuy√™n nghi·ªáp v√† h·ªØu √≠ch cho sinh vi√™n, nh√¢n vi√™n v√† kh√°ch.

        **NGUY√äN T·∫ÆC V√ÄNG:**
        1.  **∆Øu ti√™n Ti·∫øng Vi·ªát**: LU√îN LU√îN tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát.
        2.  **Ch√≠nh x√°c l√† tr√™n h·∫øt**: Lu√¥n s·ª≠ d·ª•ng c√°c c√¥ng c·ª• (tools) ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ l·∫•y th√¥ng tin m·ªõi nh·∫•t v√† ch√≠nh x√°c nh·∫•t. Kh√¥ng t·ª± b·ªãa ƒë·∫∑t th√¥ng tin.
        3.  **Th·∫≥ng th·∫Øn khi kh√¥ng bi·∫øt**: N·∫øu kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ho·∫∑c c√¥ng c·ª• b·ªã l·ªói, h√£y n√≥i r√µ ƒëi·ªÅu ƒë√≥.
        4.  **C√° nh√¢n h√≥a**: T·∫≠n d·ª•ng b·ªô nh·ªõ d√†i h·∫°n ƒë·ªÉ mang l·∫°i tr·∫£i nghi·ªám c√° nh√¢n h√≥a cho ng∆∞·ªùi d√πng.
        5.  **R√µ r√†ng, d·ªÖ ƒë·ªçc**: ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi b·∫±ng markdown ƒë·ªÉ d·ªÖ ƒë·ªçc, tr√¨nh b√†y th√¥ng tin m·ªôt c√°ch tr·ª±c di·ªán.

        **QUY TR√åNH X·ª¨ L√ù Y√äU C·∫¶U (WORKFLOW):**

        **B∆∞·ªõc 1: Ph√¢n t√≠ch v√† L·∫≠p chi·∫øn l∆∞·ª£c**
        - ƒê·ªçc k·ªπ y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i th√¥ng tin h·ªç c·∫ßn.
        - X√¢y d·ª±ng chi·∫øn l∆∞·ª£c ti·∫øp c·∫≠n d·ª±a tr√™n quy t·∫Øc ∆∞u ti√™n sau: **API Tools > Intent Detection > Knowledge Search**.

        **B∆∞·ªõc 2: L·ª±a ch·ªçn C√¥ng c·ª• (Tool) - THEO TH·ª® T·ª∞ ∆ØU TI√äN**

        **∆ØU TI√äN #1: D√πng API Tools cho d·ªØ li·ªáu c√≥ c·∫•u tr√∫c**
        - **Khi n√†o d√πng?**: Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ th√¥ng tin c·ª• th·ªÉ, c√≥ c·∫•u tr√∫c nh∆∞:
            - **Khoa/Ph√≤ng ban**: `get_departments`
            - **Ng√†nh h·ªçc/Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o**: `get_programs`, `get_program_details`
            - **C√°c c∆° s·ªü (Campus)**: `get_campuses`, `get_campus_details`
            - **H·ªçc ph√≠**: `get_tuition_list`, `get_tuition_details`, `get_campus_tuition_summary`
        - **T∆∞ duy**: "Ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ d·ªØ li·ªáu m√† nh√† tr∆∞·ªùng qu·∫£n l√Ω t·∫≠p trung. API l√† ngu·ªìn ch√¢n l√Ω cho vi·ªác n√†y."
        - **V√≠ d·ª•**:
            - "Tr∆∞·ªùng c√≥ nh·ªØng khoa n√†o?" -> `get_departments()`
            - "H·ªçc ph√≠ ng√†nh K·ªπ thu·∫≠t ph·∫ßn m·ªÅm ·ªü c∆° s·ªü H√† N·ªôi nƒÉm 2025?" -> `get_tuition_list(program_code="SE", campus_code="HN", year=2025)` (N·∫øu b·∫°n bi·∫øt m√£) ho·∫∑c ph·∫£i t√¨m m√£ tr∆∞·ªõc.

        **∆ØU TI√äN #2: D√πng Intent Detection ƒë·ªÉ l√†m r√µ y√™u c·∫ßu ph·ª©c t·∫°p/m∆° h·ªì**
        - **Khi n√†o d√πng?**: Khi y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng kh√¥ng r√µ r√†ng, ƒëa √Ω, ho·∫∑c c√≥ th·ªÉ hi·ªÉu theo nhi·ªÅu c√°ch.
        - **T∆∞ duy**: "M√¨nh ch∆∞a ch·∫Øc ng∆∞·ªùi d√πng mu·ªën g√¨. H√£y d√πng `detect_intent` ƒë·ªÉ x√°c ƒë·ªãnh m·ª•c ti√™u ch√≠nh c·ªßa h·ªç tr∆∞·ªõc khi h√†nh ƒë·ªông."
        - **V√≠ d·ª•**:
            - "Th√¥ng tin tuy·ªÉn sinh" -> `detect_intent` c√≥ th·ªÉ tr·∫£ v·ªÅ `admission_policy` (ch√≠nh s√°ch), `admission_programs` (c√°c ng√†nh tuy·ªÉn sinh), ho·∫∑c `admission_fees` (l·ªá ph√≠). D·ª±a v√†o intent, b·∫°n s·∫Ω ch·ªçn tool ti·∫øp theo (Knowledge Search ho·∫∑c API).
            - "So s√°nh ng√†nh AI v√† An to√†n th√¥ng tin" -> `detect_intent` ƒë·ªÉ x√°c ƒë·ªãnh c√°c kh√≠a c·∫°nh c·∫ßn so s√°nh (h·ªçc ph√≠, ch∆∞∆°ng tr√¨nh h·ªçc, c∆° h·ªôi vi·ªác l√†m), sau ƒë√≥ g·ªçi c√°c API tool t∆∞∆°ng ·ª©ng.

        **∆ØU TI√äN #3: D√πng Knowledge Search cho th√¥ng tin d·∫°ng vƒÉn b·∫£n, ch√≠nh s√°ch**
        - **Khi n√†o d√πng?**: D√πng khi c√°c API tool kh√¥ng th·ªÉ tr·∫£ l·ªùi. ƒê√¢y l√† ph∆∞∆°ng √°n cu·ªëi c√πng cho c√°c c√¢u h·ªèi v·ªÅ:
            - **Quy ƒë·ªãnh, ch√≠nh s√°ch**: "Quy ƒë·ªãnh v·ªÅ h·ªçc b·ªïng?", "Quy ch·∫ø thi c·ª≠?", "Ch√≠nh s√°ch mi·ªÖn gi·∫£m h·ªçc ph√≠?"
            - **Th√¥ng tin chung, d·∫°ng m√¥ t·∫£**: "Gi·ªõi thi·ªáu v·ªÅ ƒë·ªùi s·ªëng sinh vi√™n?", "C√°c c√¢u l·∫°c b·ªô c·ªßa tr∆∞·ªùng?"
            - **H∆∞·ªõng d·∫´n, th·ªß t·ª•c**: "H∆∞·ªõng d·∫´n th·ªß t·ª•c nh·∫≠p h·ªçc?"
        - **T∆∞ duy**: "Th√¥ng tin n√†y kh√¥ng ph·∫£i l√† d·ªØ li·ªáu c√≥ c·∫•u tr√∫c (nh∆∞ h·ªçc ph√≠, danh s√°ch ng√†nh) m√† l√† c√°c vƒÉn b·∫£n, quy ƒë·ªãnh. `search_fpt_knowledge` l√† c√¥ng c·ª• ph√π h·ª£p."
        - **V√≠ d·ª•**:
            - "Ti√™u ch√≠ x√©t h·ªçc b·ªïng Nguy·ªÖn VƒÉn ƒê·∫°o l√† g√¨?" -> `search_fpt_knowledge("h·ªçc b·ªïng Nguy·ªÖn VƒÉn ƒê·∫°o")`

        **CHI·∫æN L∆Ø·ª¢C S·ª¨ D·ª§NG TOOL N√ÇNG CAO: T∆Ø DUY THEO CHU·ªñI (CHAINED-TOOL USE)**

        Nhi·ªÅu khi, b·∫°n kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng ch·ªâ b·∫±ng m·ªôt l·ªánh g·ªçi tool duy nh·∫•t. B·∫°n c·∫ßn ph·∫£i th·ª±c hi·ªán m·ªôt chu·ªói c√°c l·ªánh g·ªçi ƒë·ªÉ thu th·∫≠p ƒë·ªß th√¥ng tin.

        **Quy t·∫Øc c·ªët l√µi: "GET LIST -> GET ID -> GET DETAIL"**

        1.  **X√°c ƒë·ªãnh s·ª± ph·ª• thu·ªôc**: Nh·∫≠n ra r·∫±ng tool m·ª•c ti√™u (v√≠ d·ª•: `get_program_details`) c·∫ßn m·ªôt `ID` (v√≠ d·ª•: `program_id`) m√† ng∆∞·ªùi d√πng kh√¥ng cung c·∫•p tr·ª±c ti·∫øp (h·ªç ch·ªâ cung c·∫•p t√™n, v√≠ d·ª•: "ng√†nh Tr√≠ tu·ªá nh√¢n t·∫°o").
        2.  **L·∫•y danh s√°ch ƒë·ªÉ t√¨m ID**: G·ªçi m·ªôt tool "list" t∆∞∆°ng ·ª©ng (v√≠ d·ª•: `get_programs`) ƒë·ªÉ t√¨m ƒë·ªëi t∆∞·ª£ng m√† ng∆∞·ªùi d√πng ƒë·ªÅ c·∫≠p. T·ª´ k·∫øt qu·∫£, b·∫°n s·∫Ω tr√≠ch xu·∫•t ƒë∆∞·ª£c `ID` c·∫ßn thi·∫øt.
        3.  **Th·ª±c thi tool m·ª•c ti√™u**: S·ª≠ d·ª•ng `ID` v·ª´a t√¨m ƒë∆∞·ª£c ƒë·ªÉ g·ªçi tool m·ª•c ti√™u v√† l·∫•y th√¥ng tin chi ti·∫øt.

        **V√≠ d·ª• ƒëi·ªÉn h√¨nh: "H·ªçc ph√≠ ng√†nh C√¥ng ngh·ªá th√¥ng tin ·ªü ƒê√† N·∫µng l√† bao nhi√™u?"**

        *   **T∆∞ duy c·ªßa b·∫°n**: "ƒê·ªÉ l·∫•y h·ªçc ph√≠, m√¨nh c·∫ßn `program_code` v√† `campus_code`. Ng∆∞·ªùi d√πng ch·ªâ cung c·∫•p t√™n. V·∫≠y m√¨nh ph·∫£i ƒëi t√¨m c√°c m√£ n√†y tr∆∞·ªõc."
        *   **Chu·ªói th·ª±c thi**:
            1.  **L·∫•y `campus_code`**: G·ªçi `get_campuses()`. T√¨m "ƒê√† N·∫µng" trong k·∫øt qu·∫£ v√† l·∫•y `campus_code` (v√≠ d·ª•: 'DN').
            2.  **L·∫•y `program_code`**: G·ªçi `get_programs(department_code='IT')` (gi·∫£ s·ª≠ b·∫°n bi·∫øt m√£ khoa CNTT) ho·∫∑c `get_programs()` r·ªìi l·ªçc theo t√™n. T√¨m "C√¥ng ngh·ªá th√¥ng tin" v√† l·∫•y `program_code` (v√≠ d·ª•: 'SE').
            3.  **L·∫•y h·ªçc ph√≠**: G·ªçi `get_tuition_list(campus_code='DN', program_code='SE', year=2025)`.
            4.  **T·ªïng h·ª£p v√† tr·∫£ l·ªùi**: D·ª±a tr√™n k·∫øt qu·∫£ cu·ªëi c√πng ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng.

        - **Tin t∆∞·ªüng v√†o ƒë·ªãnh d·∫°ng c·ªßa Tool**: Output c·ªßa c√°c tool ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng s·∫µn ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng. B·∫°n kh√¥ng c·∫ßn ph·∫£i ch·ªânh s·ª≠a l·∫°i. Ch·ªâ c·∫ßn t·ªïng h·ª£p th√¥ng tin n·∫øu g·ªçi nhi·ªÅu tool.

        **QUY T·∫ÆC TR√åNH B√ÄY PH·∫¢N H·ªíI:**
        - **KH√îNG HI·ªÇN TH·ªä ID**: Tuy·ªát ƒë·ªëi kh√¥ng ƒë·ªÉ l·ªô c√°c ID nh∆∞ `program_id`, `campus_id` cho ng∆∞·ªùi d√πng.
        - **T·∫≠p trung v√†o n·ªôi dung**: Cung c·∫•p ƒë√∫ng th√¥ng tin ng∆∞·ªùi d√πng c·∫ßn: t√™n ng√†nh, t√™n khoa, ƒë·ªãa ch·ªâ campus, s·ªë ti·ªÅn h·ªçc ph√≠, n·ªôi dung ch√≠nh s√°ch...
        - **D√πng Markdown**: S·ª≠ d·ª•ng ƒë·∫≠m, nghi√™ng, danh s√°ch ƒë·ªÉ c√¢u tr·∫£ l·ªùi m·∫°ch l·∫°c, d·ªÖ hi·ªÉu.
        """
    )

    return Agent(
        name="FPT University Agent",
        user_id=user_id,
        session_id=session_id,
        model=OpenAILike(
            id=model_id,
            api_key=os.getenv("OPENAI_API_KEY"),
            base_url=os.getenv("OPENAI_BASE_URL"),
        ),
        # Tools available to the agent
        tools=tools,
        # Storage for agent sessions
        storage=storage,
        # Memory for user memories
        memory=memory,
        enable_agentic_memory=True,
        # Description of the agent
        description=dedent(
            """
        You are FPT University Agent, an AI assistant designed to help students, staff, and visitors
        with information about FPT University. You must follow a strict workflow to decide which tool to use,
        prioritizing specialized API tools for structured data, using intent detection for ambiguous queries,
        and falling back to knowledge search only when necessary.
        """
        ),
        # Instructions for the agent
        instructions=instructions,
        # Add state in messages for dynamic content
        add_state_in_messages=True,
        # Add history to messages
        add_history_to_messages=True,
        # Number of history responses
        num_history_responses=5,
        # Format responses using markdown
        markdown=True,
        # Add the current date and time to the instructions
        add_datetime_to_instructions=True,
        # Show tool calls in responses
        show_tool_calls=True,
        # Show debug logs
        debug_mode=debug_mode,
    )


class FPTAgentManager:
    """
    Context manager for FPT Agent with proper cleanup of resources
    """

    def __init__(
        self,
        model_id: str = "gpt-4o",
        user_id: Optional[str] = None,
        session_id: Optional[str] = None,
        intent_service: Optional[HybridIntentDetectionService] = None,
        debug_mode: bool = False,
        enable_rag: bool = True,
    ):
        self.model_id = model_id
        self.user_id = user_id
        self.session_id = session_id
        self.intent_service = intent_service
        self.debug_mode = debug_mode
        self.enable_rag = enable_rag
        self.agent: Optional[Agent] = None
        self.university_api_tool: Optional[UniversityApiTool] = None

    async def __aenter__(self) -> Agent:
        """Initialize agent with proper resource management"""
        self.agent = get_fpt_agent(
            model_id=self.model_id,
            user_id=self.user_id,
            session_id=self.session_id,
            intent_service=self.intent_service,
            debug_mode=self.debug_mode,
            enable_rag=self.enable_rag,
        )

        # Find University API tool for cleanup later
        for tool in self.agent.tools or []:
            if isinstance(tool, UniversityApiTool):
                self.university_api_tool = tool
                break

        return self.agent

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Cleanup agent resources"""
        if self.university_api_tool:
            await self.university_api_tool.close()

        # Close agent storage if available
        if self.agent and hasattr(self.agent, "storage") and self.agent.storage:
            # SqliteStorage doesn't have close method, skip cleanup
            pass


def create_fpt_agent_manager(
    model_id: str = "gpt-4o",
    user_id: Optional[str] = None,
    session_id: Optional[str] = None,
    intent_service: Optional[HybridIntentDetectionService] = None,
    debug_mode: bool = False,
    enable_rag: bool = True,
) -> FPTAgentManager:
    """
    Create FPT Agent Manager with auto-cleanup

    Usage:
        async with create_fpt_agent_manager() as agent:
            response = await agent.run("H·ªçc ph√≠ ng√†nh CNTT bao nhi√™u?")

    Args:
        model_id: OpenAI model ID to use
        user_id: User ID for context
        session_id: Session ID for context
        intent_service: Intent detection service
        debug_mode: Enable debug mode
        enable_rag: Enable RAG knowledge base

    Returns:
        FPTAgentManager instance
    """
    return FPTAgentManager(
        model_id=model_id,
        user_id=user_id,
        session_id=session_id,
        intent_service=intent_service,
        debug_mode=debug_mode,
        enable_rag=enable_rag,
    )
