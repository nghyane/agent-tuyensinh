
"""
Formatter for scholarship data
"""

from typing import Any, Dict, List, Optional


class ScholarshipFormatter:
    """Formats scholarship data into human-readable strings"""

    def format_scholarships_list(
        self,
        scholarships: List[Dict[str, Any]],
        meta: Dict[str, Any],
        filters: Optional[Dict[str, Any]] = None,
    ) -> str:
        """Formats a list of scholarships into a string"""
        if not scholarships:
            return "Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin h·ªçc b·ªïng n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."

        year = filters.get("year") if filters else None
        title = f"üìö **Danh s√°ch h·ªçc b·ªïng nƒÉm {year}**\n\n" if year else "üìö **Danh s√°ch h·ªçc b·ªïng**\n\n"

        lines = [title]
        for idx, s in enumerate(scholarships):
            lines.append(
                f"{idx + 1}. **{s.get('name', 'N/A')}** (`{s.get('code', 'N/A')}`)"
            )
            lines.append(f"   - **Gi√° tr·ªã:** {self._format_percentage(s.get('percentage'))}")
            lines.append(f"   - **Lo·∫°i:** {s.get('type', 'N/A').replace('_', ' ').title()}")
            lines.append("")

        if meta.get("has_next"):
            lines.append(
                "üí° G·ª£i √Ω: C√≤n nhi·ªÅu h·ªçc b·ªïng kh√°c, h√£y th·ª≠ t√¨m ki·∫øm v·ªõi c√°c b·ªô l·ªçc chi ti·∫øt h∆°n ho·∫∑c xem trang ti·∫øp theo."
            )

        return "\n".join(lines)

    def format_scholarship_details(self, scholarship: Dict[str, Any]) -> str:
        """Formats a single scholarship's details into a string"""
        if not scholarship:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho h·ªçc b·ªïng n√†y."

        name = scholarship.get("name", "N/A")
        code = scholarship.get('code', "N/A")

        lines = [
            f"üéì **Th√¥ng Tin Chi Ti·∫øt H·ªçc B·ªïng: {name}** (`{code}`)\n",
            f"**- Lo·∫°i h·ªçc b·ªïng:** {scholarship.get('type', 'N/A').replace('_', ' ').title()}",
            f"**- Gi√° tr·ªã:** {self._format_percentage(scholarship.get('percentage'))}",
            f"**- ƒêi·ªÅu ki·ªán:**\n{self._format_multiline(scholarship.get('requirements', 'Ch∆∞a c√≥ th√¥ng tin'))}",
            f"**- Ghi ch√∫:**\n{self._format_multiline(scholarship.get('notes', 'Kh√¥ng c√≥'))}",
            f"**- Tr·∫°ng th√°i:** {'C√≤n hi·ªáu l·ª±c' if scholarship.get('is_active') else 'H·∫øt hi·ªáu l·ª±c'}",
            f"**- √Åp d·ª•ng cho nƒÉm:** {scholarship.get('year', 'N/A')}",
        ]

        return "\n".join(lines)

    def _format_percentage(self, percentage: Optional[int]) -> str:
        if percentage is None:
            return "Ch∆∞a c√≥ th√¥ng tin"
        if percentage == 100:
            return "To√†n ph·∫ßn"
        return f"{percentage}% h·ªçc ph√≠"

    def _format_multiline(self, text: str) -> str:
        """Helper to format multiline text with indentation"""
        if not text:
            return "  - Ch∆∞a c√≥ th√¥ng tin"
        return "\n".join([f"  - {line.strip()}" for line in text.split('\n') if line.strip()]) 