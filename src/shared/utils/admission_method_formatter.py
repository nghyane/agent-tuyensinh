
"""
Formatter for admission method data
"""

from typing import Any, Dict, List, Optional


class AdmissionMethodFormatter:
    """Formats admission method data into human-readable strings"""

    def format_admission_methods_list(
        self,
        methods: List[Dict[str, Any]],
        meta: Dict[str, Any],
        filters: Optional[Dict[str, Any]] = None,
    ) -> str:
        """Formats a list of admission methods into a string"""
        if not methods:
            return "Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†o ph√π h·ª£p."

        year = filters.get("year") if filters else None
        title = f"üìù **C√°c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn nƒÉm {year}**\n" if year else "üìù **C√°c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn**\n"
        
        lines = [title]
        for idx, m in enumerate(methods):
            lines.append(
                f"{idx + 1}. **{m.get('name', 'N/A')}** (`{m.get('method_code', 'N/A')}`)"
            )
        
        lines.append("\nüëâ ƒê·ªÉ xem chi ti·∫øt y√™u c·∫ßu c·ªßa t·ª´ng ph∆∞∆°ng th·ª©c, b·∫°n vui l√≤ng h·ªèi c·ª• th·ªÉ h∆°n nh√©.")
        
        if meta.get("has_next"):
            lines.append(
                "üí° G·ª£i √Ω: V·∫´n c√≤n c√°c ph∆∞∆°ng th·ª©c kh√°c, h√£y th·ª≠ t√¨m ki·∫øm v·ªõi b·ªô l·ªçc chi ti·∫øt h∆°n."
            )

        return "\n".join(lines)

    def format_admission_method_details(self, method: Dict[str, Any]) -> str:
        """Formats a single admission method's details into a string"""
        if not method:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."

        name = method.get("name", "N/A")
        code = method.get("method_code", "N/A")

        lines = [
            f"üìÑ **Chi Ti·∫øt Ph∆∞∆°ng Th·ª©c Tuy·ªÉn Sinh: {name}** (`{code}`)\n",
            f"**- Y√™u c·∫ßu:**\n{self._format_multiline(method.get('requirements') or '')}",
            f"**- Ghi ch√∫:**\n{self._format_multiline(method.get('notes') or '')}",
            f"**- √Åp d·ª•ng cho nƒÉm:** {method.get('year', 'N/A')}",
            f"**- Tr·∫°ng th√°i:** {'ƒêang √°p d·ª•ng' if method.get('is_active') else 'Kh√¥ng √°p d·ª•ng'}",
        ]

        return "\n".join(lines)

    def _format_multiline(self, text: str) -> str:
        """Helper to format multiline text with indentation"""
        if not text:
            return "  - Ch∆∞a c√≥ th√¥ng tin"
        return "\n".join([f"  - {line.strip()}" for line in text.split('\n') if line.strip()]) 