#!/usr/bin/env tsx

import { performance } from 'node:perf_hooks';

interface BenchmarkResult {
  test: string;
  query: string;
  method: string;
  responseTime: number;
  confidence?: number;
  success: boolean;
  metadata?: {
    intent?: string;
    messageCount?: number;
    hasContent?: boolean;
    [key: string]: unknown;
  };
}

interface BenchmarkSuite {
  name: string;
  description: string;
  results: BenchmarkResult[];
  avgResponseTime: number;
  successRate: number;
}

async function runPerformanceBenchmarks() {
  console.log('‚ö° Performance Benchmark Suite');
  console.log('='.repeat(70));

  // Test optimized intent detection
  console.log('üéØ Testing Optimized Intent Detection');
  console.log('‚îÄ'.repeat(70));

  const queries = [
    'H·ªçc ph√≠ ng√†nh IT FPT bao nhi√™u?',
    'Campus H√† N·ªôi c√≥ nh·ªØng ti·ªán √≠ch g√¨?',
    'Th∆∞ vi·ªán m·ªü c·ª≠a l√∫c m·∫•y gi·ªù?',
    'ƒêi·ªÉm chu·∫©n v√†o tr∆∞·ªùng nƒÉm 2024?',
    'FPT c√≥ nh·ªØng ng√†nh n√†o hot nh·∫•t?',
    'OJT c√≥ l∆∞∆°ng kh√¥ng?',
    'H·ªçc b·ªïng 100% c√≥ th·∫≠t kh√¥ng?',
    'H·∫°n n·ªôp h·ªì s∆° khi n√†o?',
    'AI v√† Data Science kh√°c nhau th·∫ø n√†o?',
    '98% c√≥ vi·ªác l√†m c√≥ ƒë√∫ng kh√¥ng?',
  ];

  let _totalTime = 0;
  const results = [];

  for (const query of queries) {
    const { hybridIntentDetectionService } = await import(
      '../../src/services/intent-detection-hybrid.js'
    );

    const startTime = performance.now();
    const intent = await hybridIntentDetectionService.detectIntent(query);
    const endTime = performance.now();

    const responseTime = endTime - startTime;
    _totalTime += responseTime;

    results.push({
      query,
      intent: intent.id,
      confidence: intent.confidence,
      method: intent.method,
      responseTime,
    });

    console.log(`‚úÖ "${query}"`);
    console.log(
      `   Intent: ${intent.id} | Confidence: ${(intent.confidence * 100).toFixed(1)}% | Method: ${intent.method} | Time: ${responseTime.toFixed(0)}ms`
    );
  }

  // Test 2: Agent Response Performance
  console.log('\nü§ñ 2. Agent Response Performance');
  console.log('‚îÄ'.repeat(50));

  const agentResults: BenchmarkResult[] = [];
  let totalAgentTime = 0;

  try {
    const { mastra } = await import('../../src/mastra/index.js');

    for (let i = 0; i < Math.min(5, queries.length); i++) {
      const query = queries[i];
      try {
        const startTime = performance.now();
        const agent = mastra.getAgent('admissionsAgent');
        const response = await agent.generate([{ role: 'user', content: query }]);
        const endTime = performance.now();
        const responseTime = endTime - startTime;
        totalAgentTime += responseTime;

        const hasResponse = response.response?.messages?.[0]?.content;
        const result: BenchmarkResult = {
          test: 'agent_response',
          query,
          method: 'Mastra Agent',
          responseTime,
          success: !!hasResponse,
          metadata: {
            messageCount: response.response?.messages?.length || 0,
            hasContent: !!hasResponse,
          },
        };

        agentResults.push(result);

        const status = result.success ? '‚úÖ' : '‚ùå';
        console.log(`${status} "${query.substring(0, 35)}..." | ${responseTime.toFixed(0)}ms`);

        // Add delay to avoid rate limiting
        await new Promise((resolve) => setTimeout(resolve, 1000));
      } catch (error) {
        console.log(`‚ùå "${query.substring(0, 35)}..." | ERROR: ${error}`);
        agentResults.push({
          test: 'agent_response',
          query,
          method: 'Mastra Agent',
          responseTime: 0,
          success: false,
        });
      }
    }
  } catch (_importError) {
    console.log('‚ö†Ô∏è  Could not import mastra agent');
    console.log('   This might be due to module path issues or missing dependencies');
  }

  // Test 3: Baseline Regex Performance (for comparison)
  console.log('\nüìù 3. Baseline Regex Performance');
  console.log('‚îÄ'.repeat(50));

  const regexResults: BenchmarkResult[] = [];
  let totalRegexTime = 0;

  for (const query of queries) {
    const startTime = performance.now();

    let intent = 'general_info';
    let confidence = 0.3;

    // Simple regex patterns for baseline comparison
    if (/c∆° s·ªü|campus|ti·ªán √≠ch|th∆∞ vi·ªán/i.test(query)) {
      intent = 'campus_info';
      confidence = 0.6;
    } else if (/h·ªçc ph√≠|tuition|tr·∫£ g√≥p|h·ªçc b·ªïng/i.test(query)) {
      intent = 'tuition_inquiry';
      confidence = 0.7;
    } else if (/ng√†nh|ch∆∞∆°ng tr√¨nh|program|y√™u c·∫ßu/i.test(query)) {
      intent = 'program_search';
      confidence = 0.6;
    } else if (/h·∫°n|deadline|n·ªôp h·ªì s∆°/i.test(query)) {
      intent = 'deadline_inquiry';
      confidence = 0.5;
    } else if (/quy tr√¨nh|x√©t tuy·ªÉn|tuy·ªÉn sinh/i.test(query)) {
      intent = 'admission_process';
      confidence = 0.6;
    }

    const endTime = performance.now();
    const responseTime = endTime - startTime;
    totalRegexTime += responseTime;

    const result: BenchmarkResult = {
      test: 'regex_baseline',
      query,
      method: 'Regex patterns',
      responseTime,
      confidence,
      success: confidence > 0.5,
      metadata: { intent },
    };

    regexResults.push(result);

    const status = result.success ? '‚úÖ' : '‚ö†Ô∏è';
    console.log(
      `${status} "${query.substring(0, 35)}..." | ${responseTime.toFixed(2)}ms | ${(confidence * 100).toFixed(1)}%`
    );
  }

  // Generate comprehensive benchmark report
  console.log(`\n${'='.repeat(70)}`);
  console.log('üìä COMPREHENSIVE BENCHMARK REPORT');
  console.log('='.repeat(70));

  const suites: BenchmarkSuite[] = [];

  if (agentResults.length > 0) {
    const agentSuccessRate =
      (agentResults.filter((r) => r.success).length / agentResults.length) * 100;
    const avgAgentTime = totalAgentTime / agentResults.length;
    suites.push({
      name: 'Agent Response',
      description: 'End-to-end agent workflow',
      results: agentResults,
      avgResponseTime: avgAgentTime,
      successRate: agentSuccessRate,
    });
  }

  if (regexResults.length > 0) {
    const regexSuccessRate =
      (regexResults.filter((r) => r.success).length / regexResults.length) * 100;
    const avgRegexTime = totalRegexTime / regexResults.length;
    suites.push({
      name: 'Regex Baseline',
      description: 'Pattern matching baseline',
      results: regexResults,
      avgResponseTime: avgRegexTime,
      successRate: regexSuccessRate,
    });
  }

  // Display results
  for (const suite of suites) {
    console.log(`\nüéØ ${suite.name}:`);
    console.log(`   üìã ${suite.description}`);
    console.log(`   ‚ö° Avg Response Time: ${suite.avgResponseTime.toFixed(1)}ms`);
    console.log(`   ‚úÖ Success Rate: ${suite.successRate.toFixed(1)}%`);
    console.log(`   üìä Total Tests: ${suite.results.length}`);
  }

  if (suites.length >= 2) {
    console.log('\nüìà Performance Comparison:');
    const agentSuite = suites.find((s) => s.name === 'Agent Response');
    const regexSuite = suites.find((s) => s.name === 'Regex Baseline');

    if (agentSuite && regexSuite) {
      const speedRatio = agentSuite.avgResponseTime / regexSuite.avgResponseTime;
      const accuracyGain = agentSuite.successRate - regexSuite.successRate;

      console.log(`   üöÄ Speed: Agent is ${speedRatio.toFixed(1)}x slower than regex`);
      console.log(`   üéØ Accuracy: Agent is +${accuracyGain.toFixed(1)}% more accurate`);
      console.log(
        `   üí° Trade-off: ${speedRatio.toFixed(1)}x time cost for ${accuracyGain.toFixed(1)}% accuracy gain`
      );
    }
  }

  console.log('\n‚ú® Benchmark Complete!');
  console.log('üîß Use these metrics to optimize system performance');

  return suites;
}

// Run benchmarks if executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runPerformanceBenchmarks()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('üí• Benchmark suite failed:', error);
      process.exit(1);
    });
}

export { runPerformanceBenchmarks };
